1. Фильтрация учеников. [#110058]

    В школе пришло требование разделить 9А класс на три класса.
    У каждого ученика есть общий балл по всем предметам.  int score;
    score - может быть в диапазоне от 0 до 100.
    Учеников нужно поделить на следующие группы.
    10А диапазон балла [70: 100],
    10Б диапазон балла [50: 70);
    10B диапазон балла (0: 50);

    Задание.
    1. Создайте класс Student. В классе Student должно быть одно поле int score;
    2. Создайте класс School c методом List<Student> collect(List<Student> students, Predicate<Student> predict);
    3. Создайте класс - тест SchoolTest с тремя методами для получения списка учеников для классов: А, B, C;
    4. В этом задании нужно использовать Stream API. метод filter и метод collect(Collectors.toList())
    import java.util.stream.Collectors;

------------------------------------------------------------------------------------------------------------------------
4. Преобразование List в Map. [#110226]

    Карты наиболее удобный структуры данных. Часто возникает ситуацию преобразования списка в карту.
    Для этого нужно использовать collect c аргументов Collectors.toMap.

    Пример для списка чисел.

    System.out.println(
        List.of(1, 1, 2, 2).stream().distinct().collect(
            Collectors.toMap(
                    e -> e,
                    e -> e * e
            ))
    );

    Вывод.
    {1=1, 2=4}

    Здесь

    Collectors.toMap(
        e -> e,
        e -> e * e
    )

    e - это элемент списка.
    Первый аргумент метода - это ключ карты
    Второй аргумент метода - это значение.
    В качестве примера в значение карты мы записываем квадрат элемента ключа.

    Задание.
    1. Создать список учеников. Класс Student взять из задания "Фильтрация учеников"
    2. Преобразовать список учеников в Map.
    3. В качестве ключа использовать фамилию ученика.
    4. В качестве значение использовать объект ученика.